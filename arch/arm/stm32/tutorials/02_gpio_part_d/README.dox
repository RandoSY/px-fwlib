02 GPIO part D {#STM32_TUT02_GPIO_PART_D}
=========================================

[TOC]

1. Introduction {#STM32_TUT02_GPIO_PART_D_INTRO}
================================================

*How to configure and use General Purpose (digital) I/O pins - part D*

File(s): 
- arch/arm/stm32/tutorials/02_gpio_part_d/src/gpio.c

This example flashes the LED at 1 Hz (500 ms on; 500 ms off). On the 
[PX-HER0 Board](@ref PICONOMIX_STM32_HERO_BOARD), the LED is wired to Port H pin 0.
PH0 must be configured as a digital output pin. Set PH0 high to enable the LED 
and set PH0 low to disable the LED.

2. STM32Cube LL (Low Level) API {#STM32_TUT02_GPIO_PART_D_STM32CUBE_LL}
=======================================================================

ST provides the STM32Cube library that defines a HAL (Hardware Abstraction
Layer) and LL (Low Level) API to access the peripherals. See:

    px-fwlib/libs/STM32Cube/L0/Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h
    px-fwlib/libs/STM32Cube/L0/Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_gpio.h

@tip_s
Part A, B and C was created as an introduction to understand how to use the 
definitions in these files.
@tip_e

It may seem counter intuitive, but I have found that it is easier to scan
the relevant peripheral register section in the manual, figure out which
register needs to be changed and then search for that register name in the
STM32Cube library until I find the correct API function to call. For
example, if I want to change the mode of a GPIO pin, I will search for
"MODER" and find the following hits:

    libs/STM32Cube/L0/Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_gpio.h:

    138 49:#define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0
    139 49:#define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1
    140 49:#define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0
    244 13:  * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
    272 21:  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
    272 48:  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
    279 13:  * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
    306 37:  return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0)) / (Pin * Pin));
    306 64:  return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0)) / (Pin * Pin));

Line 272 looks promising and there I find the following function:

    @code{.c}
    __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
    {
      MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
    }
    @endcode

The function has a Doxygen comment header (not reproduced here) that shows
what parameter names to use.

@tip_s
On the [PX-HER0 Board](@ref PICONOMIX_STM32_HERO_BOARD), the 6/NO button is 
wired to PC9. Now that you have mastered the GPIO peripheral, create a project 
that configures PC9 as a digital input with pull-up resistor enabled. If the 
button is pressed, PC9 goes low. Enable the LED while the button is being 
pressed. Good luck :)
@tip_e

@warn_s
Remember to enable the clock to Port C!
@warn_e
