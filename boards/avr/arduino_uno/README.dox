3.1 Arduino UNO R3 Board {#ARDUINO_UNO_BOARD}
=============================================
  
[TOC]

1. About {#ARDUINO_UNO_BOARD_ABOUT}
===================================

[atmel_studio]:      https://www.microchip.com/mplab/avr-support/atmel-studio-7
[unix_shell_utils]:  https://sourceforge.net/projects/unixshellutils/files/latest/download
[xloader]:           http://xloader.russemotto.com/
[optiboot]:          https://github.com/Optiboot/optiboot
[avrdude]:           http://www.nongnu.org/avrdude/
[tera_term]:         http://en.sourceforge.jp/projects/ttssh2
[msys2]:             https://www.msys2.org
[make]:              http://gnuwin32.sourceforge.net/packages/make.htm
[core_utils]:        http://gnuwin32.sourceforge.net/packages/coreutils.htm
[srecord]:           http://srecord.sourceforge.net

The foundation of **px-fwlib** is knowledge and freedom:
<em>the knowledge and freedom to use the right microntroller for the job and not
trying to force a square peg in a round hole.</em> It is a collection of C 
firmware and documentation to develop the highest standard of lean bare-metal 
C code that is vendor and architecture neutral (or just easier to port).

This page is dedicated to people that want to develop portable C applications for 
the Arduino UNO R3 board:

![Arduino UNO R3 Board](arduino_uno_r3.jpg)

Image Copyright (c) [Arduino SA](http://www.arduino.cc).
License: [Creative Commons Attribution ShareAlike 3.0](http://creativecommons.org/licenses/by-sa/3.0/legalcode)

There is:

* A [Microchip AVR quick start guide](@ref AVR_QUICK_START_GUIDE) with 
  distilled [tutorials](@ref AVR_TUTORIALS) and [examples](@ref AVR_EXAMPLES)
* [Recommended best practices](@ref BEST_PRACTICES)
* A [Board Support Package](@ref ARDUINO_UNO_BOARD_BSP)
* @subpage ARDUINO_UNO_BOARD_EXAMPLES "Examples"
* @subpage ARDUINO_UNO_BOARD_APPS "Applications", specifically the
  @ref ARDUINO_UNO_BOARD_APP_CLI that creates a "Un*x Shell"-like environment 
  running on the Arduino UNO so that you can experiment with GPIO, ADC, I2C and
  SPI using an ANSI/VT100 Terminal (for example [Tera Term] [tera_term])

![CLI Exlorer executing on an Arduino Uno R3](arduino_uno_cli_preview.png)

@tip_s
You can try the @ref ARDUINO_UNO_BOARD_APP_CLI without installing 
[Atmel Studio] [atmel_studio]. A HEX file is provided so that you can upload it 
with [XLoader] [xloader] and use Terminal software (for example [Tera Term] [tera_term])
to interact with the app.
@tip_e

2. Board Support Package {#ARDUINO_UNO_BOARD_BSP}
=================================================

A Board Support Package (@ref BOARDS_AVR_ARDUINO_UNO) is provided that:
- define the CPU frequency
- define the GPIO pins
- provide a function to initialise the board
- provide functions for the SPI driver to manipulate SPI chip select pins
- provide delay functions

Files:
- boards/avr/arduino_uno/inc/px_board.h
- boards/avr/arduino_uno/inc/px_board_gpio.h
- boards/avr/arduino_uno/src/px_board.c

3. Reference documents {#ARDUINO_UNO_BOARD_REFS}
================================================

- [Microchip ATmega328P datasheet](https://www.microchip.com/wwwproducts/en/ATmega328P)
- [AVR Instruction Set Manual](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-0856-AVR-Instruction-Set-Manual.pdf)
- [AVR Libc Reference Manual](http://www.nongnu.org/avr-libc/user-manual/index.html)

4. Getting started {#ARDUINO_UNO_BOARD_START}
=============================================

The following free software tools are needed:
- [Atmel Studio 7] [atmel_studio] : 
  an Integrated Development Environment (IDE) for developing and debugging Atmel
  ARM Cortex and AVR microcontroller applications on the Microsoft 
  Windows operating system. It includes the GNU GCC build toolchain for C and 
  C++.
- [UnixShellUtils] [unix_shell_utils] :
  a minimal collection of Unix shell utilities (make, sh, echo, rm, etc.) 
  curated from [MSYS2] [msys2] and other utilities ([srecord]) used to build 
  projects using advanced Makefiles.
- [XLoader] [xloader] :
  a GUI tool packaged with [avrdude] to upload a \*.HEX file to the Arduino 
  Board.
- [Tera Term] [tera_term] : 
  Free terminal emulation software to interact with 
  @ref ARDUINO_UNO_BOARD_APP_CLI.

*Atmel Studio 7 does includes GNU utilities like [make], rm and cp 
(from the [CoreUtils] [core_utils] package) but lacks* **sh** *that is required 
for advanced Makefiles.*

5.1 Install Atmel Studio 7 {#ARDUINO_UNO_BOARD_INSTALL_ATMEL_STUDIO}
--------------------------------------------------------------------

Download and install [Atmel Studio 7] [atmel_studio].

5.2 Install UnixShellUtils {#ARDUINO_UNO_BOARD_INSTALL_UNIX_SHELL_UTILS}
------------------------------------------------------------------------

Download [UnixShellUtils] [unix_shell_utils] and extract downloaded package 
to root of drive, e.g.

    C:\UnixShellUtils

5.3 Set up Atmel Studio to use custom build tools (UnixShellUtils) {#ARDUINO_UNO_BOARD_CUSTOM_BUILD_TOOLS}
----------------------------------------------------------------------------------------------------------

Start Atmel Studio. Configure options:

Tools > Options... > Builder > GNU Make

![Atmel Studio - Options](as_options_menu.png)

Set the path to the custom shell utils and make:

![Atmel Studio - Custom ShellUtils](as_builder_custom.png)

@warn_s
If you want to correctly build other projects generated with the Atmel Studio 
Framework, you have to return this setting back from Custom to **Default**. 
Atmel Studio will remember the custom settings, so it is quick to switch between 
Custom and Default.
@warn_e

5.4 Build example in Atmel Studio {#ARDUINO_UNO_BOARD_BUILD_EXAMPLE}
--------------------------------------------------------------------

All of the tutorials and examples are provided with pre-configured Atmel 
Studio projects. External Makefiles are referenced, instead of using Atmel
Studio's build system, to make the projects cross-platform.

Open and build @ref ARDUINO_UNO_BOARD_EXAMPLE_SERIAL. It is located here:

    px-fwlib/boards/avr/arduino_uno/examples/02_serial/serial.atsln

File > Open > Project/Solution... **Ctrl+Shift+O**

![Atmel Studio Open Project menu](as_open_project_menu.png)

Navigate to the project, select and open:

![Atmel Studio Open Project selection](arduino_uno_open_project.png)

Build the project:

Build > build Solution **F7**

![Build solution in Atmel Studio](arduino_uno_build_project.png)

@tip_s
If this step was not succesfull, it probably means that the custom build tools
was not correctly set up. Go back to @ref ARDUINO_UNO_BOARD_CUSTOM_BUILD_TOOLS
@tip_e

5.5 Upload example to Arduino Uno {#ARDUINO_UNO_BOARD_UPLOAD_EXAMPLE}
---------------------------------------------------------------------

After building @ref ARDUINO_UNO_BOARD_EXAMPLE_SERIAL succesfully, you will have
a HEX file called "serial.hex".

Download and run [XLoader] [xloader]. Select the HEX file, specify the correct 
COM port and press upload:

![Upload HEX file using XLoader](arduino_uno_xloader_serial.png)

You can also use the command line tool [avrdude]. The command will be something
like this:

    avrdude -C avrdude.conf -p m328p -c stk500 -b 115200 -P \\.\COM11 -F -U flash:w:serial.hex:i

@warn_s
    Make sure that your path to "avrdude" and "avrdude.conf" file is correct and
    that you specify the correct communication port (in the correct format).
@warn_e

5.6 Launch Tera Term to interact with example {#ARDUINO_UNO_BOARD_TERA_TERM}
----------------------------------------------------------------------------

Download and run [Tera Term] [tera_term]. Configure Tera Term to use the correct
serial port settings:

Setup > Serial Port...

![Configure Tera Term](arduino_uno_conf_tera_term.png)

When the COM port is opened by Tera Term, the Arduino board will be reset and
execute the application. It will send the string "Hello World!". Any characters
typed in the terminal window will be echoed back.

![Serial example interacting with Tera Term](arduino_uno_serial_example.png)

@tip_s
If the Arduino board does not reset, press the reset button on the board itself.
@tip_e

6. AVR quick start guide {#ARDUINO_UNO_BOARD_AVR_QUICK_START_GUIDE}
===================================================================

You now have a working development environment and I really hope it was quick 
and straight forward to set up. You should be able to compile an application in 
the IDE and upload it using the bootloader.

@tip_s
To make sure, build and upload @ref ARDUINO_UNO_BOARD_APP_CLI
@tip_e

The next step is to learn how to write C programs for the AVR architecture. A 
quick start guide with tutorials and examples have been created as an 
introduction. Click [HERE](@ref AVR_QUICK_START_GUIDE) to proceed to the AVR 
quick start guide.
